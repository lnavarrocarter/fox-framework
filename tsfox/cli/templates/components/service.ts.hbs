// {{serviceClassName}} - Generated by Fox Framework CLI
// Created on: {{currentDate}}

export interface {{pascalName}}Interface {
  id?: string | number;
  name: string;
  description?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface {{pascalName}}CreateData {
  name: string;
  description?: string;
}

export interface {{pascalName}}UpdateData {
  name?: string;
  description?: string;
}

export interface PaginationOptions {
  limit: number;
  offset: number;
  orderBy?: string;
  orderDirection?: 'ASC' | 'DESC';
}

export interface PaginatedResult<T> {
  data: T[];
  total: number;
}

export class {{serviceClassName}} {
  // TODO: Inject database repository or ORM
  
  /**
   * Find all {{name}} records with pagination
   */
  async findAll(options: PaginationOptions): Promise<PaginatedResult<{{pascalName}}Interface>> {
    // TODO: Implement database query
    // Example with mock data:
    const mockData: {{pascalName}}Interface[] = [
      {
        id: 1,
        name: 'Sample {{pascalName}} 1',
        description: 'This is a sample {{name}}',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        id: 2,
        name: 'Sample {{pascalName}} 2',
        description: 'This is another sample {{name}}',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];

    // Apply pagination
    const total = mockData.length;
    const data = mockData.slice(options.offset, options.offset + options.limit);

    return { data, total };
  }

  /**
   * Find {{name}} by ID
   */
  async findById(id: string | number): Promise<{{pascalName}}Interface | null> {
    // TODO: Implement database query
    // Example with mock data:
    if (id === '1' || id === 1) {
      return {
        id: 1,
        name: 'Sample {{pascalName}}',
        description: 'This is a sample {{name}}',
        createdAt: new Date(),
        updatedAt: new Date()
      };
    }

    return null;
  }

  /**
   * Create new {{name}}
   */
  async create(data: {{pascalName}}CreateData): Promise<{{pascalName}}Interface> {
    // TODO: Implement database insertion
    // Example with mock data:
    const new{{pascalName}}: {{pascalName}}Interface = {
      id: Date.now(), // Generate unique ID
      ...data,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    return new{{pascalName}};
  }

  /**
   * Update {{name}} by ID
   */
  async update(id: string | number, data: {{pascalName}}UpdateData): Promise<{{pascalName}}Interface | null> {
    // TODO: Implement database update
    // Example with mock data:
    const existing = await this.findById(id);
    
    if (!existing) {
      return null;
    }

    const updated{{pascalName}}: {{pascalName}}Interface = {
      ...existing,
      ...data,
      updatedAt: new Date()
    };

    return updated{{pascalName}};
  }

  /**
   * Delete {{name}} by ID
   */
  async delete(id: string | number): Promise<boolean> {
    // TODO: Implement database deletion
    // Example with mock data:
    const existing = await this.findById(id);
    return existing !== null;
  }

  /**
   * Count total {{name}} records
   */
  async count(): Promise<number> {
    // TODO: Implement database count
    return 2; // Mock count
  }

  /**
   * Search {{name}} records by criteria
   */
  async search(
    criteria: Partial<{{pascalName}}Interface>,
    options: PaginationOptions
  ): Promise<PaginatedResult<{{pascalName}}Interface>> {
    // TODO: Implement database search
    // For now, return same as findAll
    return this.findAll(options);
  }

  /**
   * Check if {{name}} exists by ID
   */
  async exists(id: string | number): Promise<boolean> {
    const {{name}} = await this.findById(id);
    return {{name}} !== null;
  }

  /**
   * Bulk create {{name}} records
   */
  async bulkCreate(dataArray: {{pascalName}}CreateData[]): Promise<{{pascalName}}Interface[]> {
    // TODO: Implement bulk database insertion
    const results: {{pascalName}}Interface[] = [];
    
    for (const data of dataArray) {
      const created = await this.create(data);
      results.push(created);
    }
    
    return results;
  }

  /**
   * Bulk delete {{name}} records by IDs
   */
  async bulkDelete(ids: (string | number)[]): Promise<number> {
    // TODO: Implement bulk database deletion
    let deletedCount = 0;
    
    for (const id of ids) {
      const deleted = await this.delete(id);
      if (deleted) deletedCount++;
    }
    
    return deletedCount;
  }
}
