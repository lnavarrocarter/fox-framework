// {{className}} - Generated by Fox Framework CLI
// Created on: {{currentDate}}

import { Router, Request, Response, NextFunction } from 'express';
{{#if withValidation}}
import { validateSchema } from '@tsfox/core/validation/middleware';
import { {{pascalName}}Schema } from '../schemas/{{kebabName}}.schema';
{{/if}}
{{#if withAuth}}
import { authenticate, authorize } from '../middleware/auth.middleware';
{{/if}}
{{#if service}}
import { {{serviceName}} } from '../services/{{kebabName}}.service';
{{/if}}

export class {{className}} {
  public router: Router;
  {{#if service}}
  private {{name}}Service: {{serviceName}};
  {{/if}}

  constructor() {
    this.router = Router();
    {{#if service}}
    this.{{name}}Service = new {{serviceName}}();
    {{/if}}
    this.initializeRoutes();
  }

  private initializeRoutes(): void {
    {{#if withCrud}}
    // CRUD Routes
    this.router.get('/', this.getAll.bind(this));
    this.router.get('/:id', this.getById.bind(this));
    this.router.post('/', 
      {{#if withValidation}}validateSchema({{pascalName}}Schema),{{/if}}
      {{#if withAuth}}authenticate, authorize(['admin', 'user']),{{/if}}
      this.create.bind(this)
    );
    this.router.put('/:id', 
      {{#if withValidation}}validateSchema({{pascalName}}Schema),{{/if}}
      {{#if withAuth}}authenticate, authorize(['admin']),{{/if}}
      this.update.bind(this)
    );
    this.router.delete('/:id', 
      {{#if withAuth}}authenticate, authorize(['admin']),{{/if}}
      this.delete.bind(this)
    );
    {{else}}
    // Basic Routes
    this.router.get('/', this.index.bind(this));
    {{/if}}
  }

  {{#if withCrud}}
  /**
   * Get all {{name}} records
   */
  public async getAll(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      const page = parseInt(req.query.page as string) || 1;
      const limit = parseInt(req.query.limit as string) || 10;
      const offset = (page - 1) * limit;

      {{#if service}}
      const result = await this.{{name}}Service.findAll({ limit, offset });
      {{else}}
      // TODO: Implement database query
      const result = {
        data: [],
        total: 0,
        page,
        limit
      };
      {{/if}}

      res.json({
        success: true,
        data: result.data,
        pagination: {
          page,
          limit,
          total: result.total,
          pages: Math.ceil(result.total / limit)
        }
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * Get {{name}} by ID
   */
  public async getById(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      const id = req.params.id;

      {{#if service}}
      const {{name}} = await this.{{name}}Service.findById(id);
      {{else}}
      // TODO: Implement database query
      const {{name}} = null;
      {{/if}}

      if (!{{name}}) {
        res.status(404).json({
          success: false,
          message: '{{pascalName}} not found'
        });
        return;
      }

      res.json({
        success: true,
        data: {{name}}
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * Create new {{name}}
   */
  public async create(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      const {{name}}Data = req.body;

      {{#if service}}
      const {{name}} = await this.{{name}}Service.create({{name}}Data);
      {{else}}
      // TODO: Implement database creation
      const {{name}} = { id: Date.now(), ...{{name}}Data };
      {{/if}}

      res.status(201).json({
        success: true,
        data: {{name}},
        message: '{{pascalName}} created successfully'
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * Update {{name}} by ID
   */
  public async update(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      const id = req.params.id;
      const updateData = req.body;

      {{#if service}}
      const {{name}} = await this.{{name}}Service.update(id, updateData);
      {{else}}
      // TODO: Implement database update
      const {{name}} = { id, ...updateData };
      {{/if}}

      if (!{{name}}) {
        res.status(404).json({
          success: false,
          message: '{{pascalName}} not found'
        });
        return;
      }

      res.json({
        success: true,
        data: {{name}},
        message: '{{pascalName}} updated successfully'
      });
    } catch (error) {
      next(error);
    }
  }

  /**
   * Delete {{name}} by ID
   */
  public async delete(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      const id = req.params.id;

      {{#if service}}
      const deleted = await this.{{name}}Service.delete(id);
      {{else}}
      // TODO: Implement database deletion
      const deleted = true;
      {{/if}}

      if (!deleted) {
        res.status(404).json({
          success: false,
          message: '{{pascalName}} not found'
        });
        return;
      }

      res.json({
        success: true,
        message: '{{pascalName}} deleted successfully'
      });
    } catch (error) {
      next(error);
    }
  }
  {{else}}
  /**
   * Handle index route
   */
  public async index(req: Request, res: Response, next: NextFunction): Promise<void> {
    try {
      res.json({
        success: true,
        message: '{{pascalName}} controller is working!',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      next(error);
    }
  }
  {{/if}}
}
