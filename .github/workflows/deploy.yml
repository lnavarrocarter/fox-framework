# GitHub Actions CI/CD Workflows for Fox Framework

name: 'Fox Framework CI/CD'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: 'docker.io'

jobs:
  # Test Job
  test:
    name: 'Run Tests'
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 'Install Dependencies'
        run: npm ci
        
      - name: 'Run Unit Tests'
        run: npm test
        
      - name: 'Run Integration Tests'
        run: npm run test:integration
        
      - name: 'Generate Coverage Report'
        run: npm run test:coverage
        
      - name: 'Upload Coverage to Codecov'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

  # Build Docker Image
  build:
    name: 'Build Docker Image'
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3
        
      - name: 'Login to Docker Registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: 'Extract Metadata'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 'Build and Push Docker Image'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Development Environment
  deploy-dev:
    name: 'Deploy to Development'
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 'Install Dependencies'
        run: npm ci
        
      - name: 'Deploy to AWS Development'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          npx tsfox deploy \
            --provider aws \
            --environment development \
            --region $AWS_DEFAULT_REGION \
            --app-name fox-framework-dev \
            --scaling-min 1 \
            --scaling-max 3
            
      - name: 'Run Smoke Tests'
        run: |
          npm run test:smoke:dev

  # Deploy to Staging Environment
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 'Install Dependencies'
        run: npm ci
        
      - name: 'Deploy to GCP Staging'
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
        run: |
          echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > gcp-key.json
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/gcp-key.json"
          
          npx tsfox deploy \
            --provider gcp \
            --environment staging \
            --region $GCP_REGION \
            --app-name fox-framework-staging \
            --scaling-min 2 \
            --scaling-max 5 \
            --database postgresql \
            --database-size db-f1-micro
            
      - name: 'Run End-to-End Tests'
        run: |
          npm run test:e2e:staging

  # Deploy to Production Environment
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 'Install Dependencies'
        run: npm ci
        
      - name: 'Deploy to Multiple Cloud Providers'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          # Deploy to AWS Production
          npx tsfox deploy \
            --provider aws \
            --environment production \
            --region us-east-1 \
            --app-name fox-framework-prod \
            --scaling-min 3 \
            --scaling-max 10 \
            --database postgresql \
            --ssl true \
            --monitoring true
          
          # Deploy to Azure as backup
          npx tsfox deploy \
            --provider azure \
            --environment production \
            --region eastus \
            --app-name fox-framework-prod-backup \
            --scaling-min 2 \
            --scaling-max 8
            
      - name: 'Run Production Health Checks'
        run: |
          npm run test:health:production
          
      - name: 'Notify Deployment Success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'ðŸš€ Fox Framework successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security Scanning
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Run Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 'Upload Trivy scan results to GitHub Security'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 'Run npm audit'
        run: |
          npm audit --audit-level high

  # Performance Testing
  performance:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 'Install Dependencies'
        run: npm ci
        
      - name: 'Run Load Tests'
        run: |
          npm run test:load:staging
          
      - name: 'Generate Performance Report'
        run: |
          npm run report:performance
          
      - name: 'Upload Performance Results'
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/

  # Cleanup Development Deployments
  cleanup:
    name: 'Cleanup Old Deployments'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 'Cleanup AWS Development Resources'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          # Clean up old ECS task definitions (keep last 5)
          aws ecs list-task-definitions --family-prefix fox-framework-dev \
            --query 'taskDefinitionArns[:-5]' --output text | \
            xargs -I {} aws ecs deregister-task-definition --task-definition {}
          
          # Clean up old ECR images (keep last 10)
          aws ecr list-images --repository-name fox-framework-dev \
            --filter tagStatus=UNTAGGED \
            --query 'imageIds[:-10]' --output text | \
            xargs -I {} aws ecr batch-delete-image --repository-name fox-framework-dev --image-ids imageDigest={}
